// ALGORITMO DE JOGO DA VELHA
tipo tabuleiro {
    caractere: m[3][3];
}

tipo jogador {
    caractere: nome;
    caractere: simbolo;
}

tipo jogada {
    inteiro: l;
    inteiro: c;
}

início {
    // Variáveis
    inteiro: numero_jogador;
    
    // Variáveis customizadas
    tabuleiro: t;
    jogador: jogadores[2];
    
    limparTabuleiro(t);
    criarJogadores(jogadores);
    imprimirTabuleiro(t);
    
    numero_jogador = 0;
    
    enquanto(não verificarTabuleiroCheio(t) e não verificarJogoAcabou(t)) {
        jogada: jogada;
        
        escreva("====================================");
        jogada = fazerJogada(jogadores[numero_jogador]);
        
        se (efetuarJogada(t, jogadores[numero_jogador], jogada)) {
            imprimirTabuleiro(t);
            
            // Alterna entre jogadores, isso é usa em "vetores circulares".
            numero_jogador = (numero_jogador + 1) % 2;
        } senão {
            escreva("Jogada inválida. Tente novamente.");
        }
    }
}

função criarJogadores(jogador: jogadores[2]) {
    jogadores[0].nome = "A";
    jogadores[0].simbolo = "O";
    
    jogadores[1].nome = "B";
    jogadores[1].simbolo = "X";
}

função limparTabuleiro(tabuleiro: t) {
    inteiro: l;
    inteiro: c;
    
    para l de 0 até 2 passo 1 {
        para c de 0 até 2 passo 1 {
            t.m[l][c] = " ";
        }
    }
}

função imprimirTabuleiro(tabuleiro: t) {
    inteiro: l;
    
    para l de 0 até 2 passo 1 {
        // Escreval impede que a linha seja quebrada
        escreval(t.m[l][0]);
        escreval(" | ");
        escreval(t.m[l][1]);
        escreval(" | ");
        escreva(t.m[l][2]);
        se (l < 2) {
            escreva("---------");
        }
    }
}

função fazerJogada(jogador: jogador) -> jogada {
    jogada: jogada;
    
    leia("Jogador " + jogador.nome + " => Linha:", jogada.l);
    leia("Jogador " + jogador.nome + " => Coluna:", jogada.c);
    retorne jogada;
}

função verificarTabuleiroCheio(tabuleiro: t) -> lógico {
    retorne falso;
}

função verificarJogoAcabou(tabuleiro: t) -> lógico {
    retorne falso;
}

função efetuarJogada(tabuleiro: t, jogador: jogador, jogada: jogada) -> lógico {
    inteiro: linha;
    inteiro: coluna;
    
    linha = jogada.l - 1;
    coluna = jogada.c - 1;
    
    se (t.m[linha][coluna] <> " ") {
        retorne falso;
    }
    t.m[linha][coluna] = jogador.simbolo;
    retorne verdadeiro;
}